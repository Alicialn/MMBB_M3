{"code":"import { __awaiter } from \"tslib\";\r\nclass DeviceMotionExtension {\r\n    constructor(jsPsych) {\r\n        this.jsPsych = jsPsych;\r\n        this.initialize = () => __awaiter(this, void 0, void 0, function* () {\r\n            this.domObserver = new MutationObserver(this.mutationObserverCallback);\r\n        });\r\n        this.on_start = (params) => {\r\n            params = params || {};\r\n            this.currentTrialData = [];\r\n            this.currentTrialTargets = new Map();\r\n            this.currentTrialSelectors = params.targets || [];\r\n            this.lastSampleTime = null;\r\n            this.eventsToTrack = params.events || [\"devicemotion\"];\r\n            this.domObserver.observe(this.jsPsych.getDisplayElement(), { childList: true });\r\n        };\r\n        this.on_load = () => {\r\n            // set current trial start time\r\n            this.currentTrialStartTime = performance.now();\r\n            // start data collection\r\n            if (this.eventsToTrack.includes(\"devicemotion\")) {\r\n                window.addEventListener(\"devicemotion\", this.deviceMotionEventHandler, true);\r\n            }\r\n        };\r\n        this.on_finish = () => {\r\n            this.domObserver.disconnect();\r\n            if (this.eventsToTrack.includes(\"devicemotion\")) {\r\n                window.removeEventListener(\"devicemotion\", this.deviceMotionEventHandler, true);\r\n            }\r\n            return {\r\n                device_motion_data: this.currentTrialData,\r\n            };\r\n        };\r\n        this.deviceMotionEventHandler = (eventA) => {\r\n            const event_time = performance.now();\r\n            const t = Math.round(event_time - this.currentTrialStartTime);\r\n            var x = eventA.acceleration.x;\r\n            var y = eventA.acceleration.y;\r\n            var z = eventA.acceleration.z;\r\n            var interval = eventA.interval; //gets interval between samples in ms\r\n            this.lastSampleTime = event_time;\r\n            this.currentTrialData.push({ x, y, z, interval, t, event: \"devicemotion\" });\r\n        };\r\n        this.mutationObserverCallback = (mutationsList, observer) => {\r\n            for (const selector of this.currentTrialSelectors) {\r\n                if (!this.currentTrialTargets.has(selector)) {\r\n                    const target = this.jsPsych.getDisplayElement().querySelector(selector);\r\n                    if (target) {\r\n                        this.currentTrialTargets.set(selector, target.getBoundingClientRect());\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\nDeviceMotionExtension.info = {\r\n    name: \"device-motion-tracking\",\r\n};\r\nexport default DeviceMotionExtension;\r\n//# sourceMappingURL=index.js.map","references":["/Users/pdealcan/Documents/github/jspsych-contrib/node_modules/jspsych/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/pdealcan/Documents/github/jspsych-contrib/packages/extension-device-motion/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { JsPsych, JsPsychExtension, JsPsychExtensionInfo } from \"jspsych\";\r\ninterface OnStartParameters {\r\n    /**\r\n     * An array of string selectors. The selectors should identify one unique element on the page.\r\n     * The DOMRect of the element will be stored in the data.\r\n     */\r\n    targets?: Array<string>;\r\n    /**\r\n     * An array of mouse events to track. Can include `\"mousemove\"`, `\"mousedown\"`, and `\"mouseup\"`.\r\n     * @default ['devicemotion']\r\n     */\r\n    events?: Array<string>;\r\n}\r\ndeclare class DeviceMotionExtension implements JsPsychExtension {\r\n    private jsPsych;\r\n    static info: JsPsychExtensionInfo;\r\n    constructor(jsPsych: JsPsych);\r\n    private domObserver;\r\n    private currentTrialData;\r\n    private currentTrialTargets;\r\n    private currentTrialSelectors;\r\n    private currentTrialStartTime;\r\n    private lastSampleTime;\r\n    private eventsToTrack;\r\n    initialize: () => Promise<void>;\r\n    on_start: (params: OnStartParameters) => void;\r\n    on_load: () => void;\r\n    on_finish: () => {\r\n        device_motion_data: object[];\r\n    };\r\n    private deviceMotionEventHandler;\r\n    private mutationObserverCallback;\r\n}\r\nexport default DeviceMotionExtension;\r\n"}}
